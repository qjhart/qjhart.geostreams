/************************************************/
/*** This file is to test conversion between 
   * Pixel/Line and Lat/Lon 
***/

#include <stdlib.h>
#include <iostream>

#include "ELUG.h"

using namespace std;

int main(int argc, char** argv) {

	if (argc != 4) {
	   printf("Usage: executable islp2ll(1=lp2ll 0=ll2pl) line/lat pixel/lon\n");
	   exit(0);
	}

        float pixel; 
	float line;
	float lon; 
	float lat;
	float rlon;
	float rlat;

	int islp2ll = atoi(argv[1]);
	if (islp2ll) { 	
	   pixel = atof(argv[3]);
	   line = atof(argv[2]);
           cout<< "line = " << line << " pixel = " << pixel << endl;
	} else {
	   lon = atof(argv[3]);
	   lat = atof(argv[2]);
	   rlon = lon * .017453292519943295;
	   rlat = lat * .017453292519943295;

           cout<< "lat = " << lat<< " lon = " << lon<< endl;
	}


	Elug testElug;

        double epoch;
	double time; 
	double subsat_lat;
	double subsat_lon;
	float rrlat;
	float rrlon;
	float elev;
	float scan;

	int flipflag = -1;   // 1=normal    -1=inverted
	int imc = 0;          // 1=disaled 0=enabled
	int instr = 2;       // 1=imager   2=sounder

	int ierr;

	extern float one_rec[];
        testElug.setRec(one_rec);

	/*** set constants ***/
	testElug.setcons(4,3068,2,3068,4,1403,2,1403);

	/*** compute epoch time ***/
	epoch= testElug.timex(1994,299,00,00,0.0);
	time=  testElug.timex(1994,299,16,05,0.0);
	cout<<"epoch = "<<epoch<<"  time = "<<time << endl;
	
	printf( "rec[0] = %f rec[1] = %f\n", one_rec[11], one_rec[12]);
	int xxx[2];
	xxx[0] = (int) one_rec[11];
	xxx[1] = (int) one_rec[12];
	printf( "xxx[0] = %x xxx[1] = %x\n", xxx[0], xxx[1]);
	printf( "xxx[0] = %d xxx[1] = %d\n", xxx[0], xxx[1]);
	char str[1024];
	sprintf(str, "%x %x", xxx[0], xxx[1]);
	printf(" str = [%s]\n", str);
	int yyy[2];
	sscanf(str, "%d %d", &yyy[0], &yyy[1]);
	printf( "yyy[0] = %d yyy[1] = %d\n", yyy[0], yyy[1]);
	epoch = testElug.time50(yyy);
/**
	int time1 = (int) one_rec[13];
	time = testElug.time50(&time1);
**/	
	cout<<"epoch = "<<epoch <<endl;

	epoch = (float)20557829.57612;
	time = epoch + (float)20.;

	cout<<"epoch = "<<epoch<<"  time = "<<time << endl;
 
      if (islp2ll) {
//******************************
     	    testElug.setFlipflag(flipflag);

	        testElug.setImc(imc);

		testElug.lmodel(time, epoch, imc);
		subsat_lon = testElug.getSubsatLon();
		subsat_lat = testElug.getSubsatLat();

		cout <<"subsat_lat = " <<subsat_lat << " subsat_lon = "
	     	    << subsat_lon << endl;

		    testElug.setInstr(instr);

		    flipflag = testElug.getFlipflag();
	 	    imc = testElug.getImc();
	            instr = testElug.getInstr();
	            cout<<"instr = "<< instr <<" flipflag =" << flipflag << " imc = " 
	               << imc << endl << endl;

//***********************
        /*** CONVERT Line/pixel to lat/lon ***/
	   cout<<"LINE/PIXEL TO LAT/LON TRANSFORMATION: "<<endl;
           cout<<"     Line="<< line << " Pixel= " << pixel <<endl;
       	   ierr = testElug.pl2ll(pixel, line, &rrlon, &rrlat);

	   elev = testElug.getEvln(instr, line);
	   scan = testElug.getScpx(instr, pixel);
           cout<<"     elev= " <<elev <<"  scan= "<< scan <<endl;
           cout<<"    dE= "<< rad2deg(elev) <<" dS="<< rad2deg(scan) << endl;
                            
	   cout<<"err = "<< ierr << endl;
           if (ierr== 0) {
	      cout<<"     RRLAT= "<<rrlat <<" RRLON= "<< rrlon <<endl;
              cout<<"     DLAT= " << rad2deg(rrlat) << " DLON= "
		  << rad2deg(rrlon) << endl << endl;
           }
	} else {
	   cout<<"LAT/LON TO LINE/PIXEL TRANSFORMATION: "<<endl;
           cout<<"     Lat="<< lat << " Lon= " << lon <<endl;
       	   ierr = testElug.ll2pl(rlon, rlat, &pixel, &line);
	/***
	   elev = testElug.getEvln(instr, line);
	   scan = testElug.getScpx(instr, pixel);
           cout<<"     elev= " <<elev <<"  scan= "<< scan <<endl;
           cout<<"    dE= "<< rad2deg(elev) <<" dS="<< rad2deg(scan) << endl;
    	***/                        
	   cout<<"err = "<< ierr << endl;
           if (ierr== 0) {
              cout<<"     Line= " << line << " Pixel= "
		  << pixel << endl;
           }
	
        }
	return 0;
}	

float one_rec[336] = {
          0.00000000,
          0.00000000,
          0.00000000,
          0.00000000,
         -1.74740505,
         84.06604004,
         -0.03436849,
         -0.00610298,
          0.00000000,
          0.00000000,
          0.00000000,
  428409632.00000000,
 1653818727.00000000,
          0.00000000,
          0.00030000,
         -0.00030000,
         -0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00020000,
          0.00436300,
          0.00000000,
          0.00050000,
        100.00000000,
          0.00200000,
         15.00000000,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          4.00000000,
          2.00000000,
          2.00000000,
          0.00001000,
          0.00000000,
          0.01000000,
          2.00000000,
          3.00000000,
         -0.00001000,
          0.00000000,
          0.01000000,
          3.00000000,
          2.00000000,
          0.00001000,
          0.00000000,
          0.01000000,
          3.00000000,
          3.00000000,
         -0.00001000,
          0.00000000,
          0.01000000,
          0.00050000,
        100.00000000,
          0.00200000,
         15.00000000,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          4.00000000,
          2.00000000,
          2.00000000,
          0.00001000,
          0.00000000,
          0.01000000,
          2.00000000,
          3.00000000,
         -0.00001000,
          0.00000000,
          0.01000000,
          3.00000000,
          2.00000000,
          0.00001000,
          0.00000000,
          0.01000000,
          3.00000000,
          3.00000000,
         -0.00001000,
          0.00000000,
          0.01000000,
          0.00050000,
        100.00000000,
          0.00100000,
         15.00000000,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          4.00000000,
          2.00000000,
          2.00000000,
          0.00001000,
          0.00000000,
          0.01000000,
          2.00000000,
          3.00000000,
         -0.00001000,
          0.00000000,
          0.01000000,
          3.00000000,
          2.00000000,
          0.00001000,
          0.00000000,
          0.01000000,
          3.00000000,
          3.00000000,
         -0.00001000,
          0.00000000,
          0.01000000,
         -0.00005000,
         10.00000000,
          0.00100000,
         15.00000000,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          4.00000000,
          2.00000000,
          2.00000000,
          0.00001000,
          0.00000000,
          0.01000000,
          2.00000000,
          3.00000000,
         -0.00001000,
          0.00000000,
          0.01000000,
          3.00000000,
          2.00000000,
          0.00001000,
          0.00000000,
          0.01000000,
          3.00000000,
          3.00000000,
         -0.00001000,
          0.00000000,
          0.01000000,
         -0.00005000,
         10.00000000,
          0.00100000,
         15.00000000,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          0.00000500,
          4.00000000,
          2.00000000,
          2.00000000,
          0.00001000,
          0.00000000,
          0.01000000,
          2.00000000,
          3.00000000,
         -0.00001000,
          0.00000000,
          0.01000000,
          3.00000000,
          2.00000000,
          0.00001000,
          0.00000000,
          0.01000000,
          3.00000000,
          3.00000000,
         -0.00001000,
          0.00000000,
          0.01000000
};
