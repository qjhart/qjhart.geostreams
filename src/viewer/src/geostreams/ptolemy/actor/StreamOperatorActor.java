package geostreams.ptolemy.actor;

import geostreams.image.IStream;
import geostreams.image.IStreamGenerator;
import geostreams.ptolemy.icon.OperatorIcon;

import java.awt.Color;
import java.awt.Rectangle;

import ptolemy.actor.TypedAtomicActor;
import ptolemy.actor.TypedIOPort;
import ptolemy.data.expr.StringParameter;
import ptolemy.data.type.BaseType;
import ptolemy.kernel.CompositeEntity;
import ptolemy.kernel.util.IllegalActionException;
import ptolemy.kernel.util.NameDuplicationException;

/**
 * TODO : 0 istream
 * 
 * @author Carlos Rueda-Velasquez
 * @version $Id: StreamOperatorActor.java,v 1.5 2007/06/23 18:38:29 crueda Exp $
 */
public abstract class StreamOperatorActor extends TypedAtomicActor
implements IStreamGenerator {

	/** Input port. Created when _createInputPort() is called */
	public TypedIOPort input;
	
	/** Output port. Created when _createOutputPort() is called */
    public TypedIOPort output;

    
    /** ROI parameter. Created when _createRoiParameter is called. */
	public StringParameter roiParam;

	protected Rectangle _roi;
	
	// subclasses will check for null-ness before calling _setStream
	protected IStream _istream;  
	
	/** Name of the operator, used in the icon */
	protected String _opName;
	protected OperatorIcon _icon;
	
	/** ID of the stream generated by this operator. */ 
	protected String _streamID;
	
	protected static void _printRect(String s, Rectangle r) {
		System.out.println(s+ r.x+ " " +r.y+ " " + r.width+ " " +r.height);
	}
	
	/**
	 * 
	 * @param container
	 * @param name
	 * @param opName Used for botn _opName and _streamID
	 * @throws NameDuplicationException
	 * @throws IllegalActionException
	 */
	protected StreamOperatorActor(CompositeEntity container, String name, String opName)
	throws NameDuplicationException, IllegalActionException {
		this(container, name, opName, opName);
	}
	/**
	 * 
	 * @param container
	 * @param name
	 * @param opName Operator name
	 * @throws NameDuplicationException
	 * @throws IllegalActionException
	 */
	protected StreamOperatorActor(CompositeEntity container, String name, 
			String opName, String streamID)
	throws NameDuplicationException, IllegalActionException {
		super(container, name);
		_opName = opName;
		_streamID = streamID;
		
		if ( opName != null ) {
			_icon = new OperatorIcon(this, "_icon", _opName);
			_icon.setBackgroundColor(new Color(0x189597)); //Color.CYAN);
		}
	}
	
	
	public IStream getGeneratedStream() {
		return _istream;
	}

	
	protected void _createRoiParameter() throws IllegalActionException, NameDuplicationException {
		if ( roiParam == null ) {
			roiParam = new StringParameter(this, "roiParam");
			roiParam.setExpression("9500 6000 22000 8500");
			roiParam.setDisplayName("Region of interest");
		}
	}
	
	protected void _createInputPort(boolean multiPort) throws IllegalActionException, NameDuplicationException {
		if ( input == null ) {
			input = new TypedIOPort(this, "input", true, false);
			input.setTypeEquals(BaseType.OBJECT);
			input.setMultiport(multiPort);
		}
	}
	
	protected void _createOutputPort(boolean multiPort) throws IllegalActionException, NameDuplicationException {
		if ( output == null ) {
			output = new TypedIOPort(this, "output", false, true);
			output.setTypeEquals(BaseType.OBJECT);
			output.setMultiport(multiPort);
		}
	}
	
	/**
	 * If _createOutputPort() has been called, calls output.setName(_streamID).
	 * If _createRoiParameter() has been called, it obtains _roi.
	 * istream is assigned null.
	 */
	public void initialize() throws IllegalActionException {
		super.initialize();
		_istream = null;
		
//		TODO port-name - remove this -- we don't change it 
//		if ( output != null ) {
//			try {
//				output.setName(_streamID);
//			}
//			catch (NameDuplicationException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		}
		if ( roiParam != null ) {
	        try {
	        	String[] toks = roiParam.stringValue().split("\\s+");
	        	int[] vals = new int[toks.length];
	        	for (int i = 0; i < vals.length; i++) {
					vals[i] = Integer.parseInt(toks[i]);
				}
	        	int roi_x = vals[0];
	        	int roi_y = vals[1];
	        	int roi_w = vals[2] - roi_x + 1;
	        	int roi_h = vals[3] - roi_y + 1;
	        	_roi = new Rectangle(roi_x, roi_y, roi_w, roi_h);
	        	_printRect(getClass().getSimpleName()+ ": ROI = ", _roi);
	        }
	        catch (Exception ex) {
	        	throw new IllegalActionException("Invalid ROI spec: " +ex.getMessage());
			}
		}
	}

	/**
	 * Should be called by a subclass (eg, in its fire() method) when the generated 
	 * _istream has been obtained.
	 * Nothing is done in this base class.
	 */
	protected void _generatedStreamObtained() {
		// nothing.
	}
	
	public void wrapup() throws IllegalActionException {
    	super.wrapup();
    	_istream = null;
    }


}